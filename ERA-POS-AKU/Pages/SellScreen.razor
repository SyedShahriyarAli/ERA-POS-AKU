@page "/sellscreen"

@using ERA_POS_AKU.Data
@inject GlobalService GlobalService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    .rz-g > div, .rz-datalist-data > li {
        padding: 0 !important;
    }

    .product-title {
        height: 100%;
        background-color: var(--rz-secondary-lighter);
    }

    .box {
        display: flex;
        flex-flow: column;
        height: 100%;
    }

        .box .row.header {
            flex: 0 1 auto;
        }

        .box .row.main {
            flex: 1 1 auto;
        }

        .box .row.footer {
            flex: 0 1 40px;
        }

    .rz-text-body1 {
        font-size: 1.2em !important;
    }

    .rz-text-body2 {
        font-size: 1.2em !important;
    }

    .rz-text-h6 {
        font-size: 1.2em !important;
    }

    .rz-button-text {
        font-size: 1.1em !important;
    }

    .rz-datalist-data {
        padding-top: 0.1rem;
        padding-bottom: 0.1rem;
    }

    .selected {
        background-color: var(--rz-primary-light) !important;
    }
</style>

<RadzenStack class="box">
    <RadzenCard Variant="Variant.Flat" class="header row">
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
            <RadzenColumn Size="5">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
                    <RadzenText TextStyle="TextStyle.DisplayH6" Style="margin-left: 16px; margin-bottom: 0 !important">ERA POS</RadzenText>
                    <RadzenText TextStyle="TextStyle.DisplayH6" Style="margin-bottom: 0 !important" Text="(Station # 01)" />
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="7">
                <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Style="margin-left: 16px; margin-bottom: 0 !important;">Logged in as <strong>Cashier</strong>!</RadzenText>
                    <RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Success" Text="Online" class="d-flex align-items-center" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>

    <RadzenRow class="main row">
        <RadzenColumn Size="8" class="rz-p-0">
            <RadzenCard Style="height: 100%" Variant="Variant.Flat">
                <RadzenStack class="box">
                    <RadzenRow class="row header">
                        <RadzenColumn Size="12">
                            <RadzenRow class="rz-mx-4 rz-my-0">
                                <RadzenColumn Size="10">
                                    <input placeholder="Scan Barcode (F4)" @bind-value="@search" @bind-value:event="oninput" class="rz-textbox rz-border-radius-6" autocomplete="false" style="width:100%" @onkeydown="SearchBarcode" @ref="barcodeInput" id="barcodeInput" disabled="@returnMode" />
                                </RadzenColumn>
                                <RadzenColumn Size="2">
                                    <RadzenStack JustifyContent="JustifyContent.Stretch">
                                        <RadzenButton Icon="list" Text="Lookup" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" Click="@ViewProducts" Disabled="@returnMode" />
                                    </RadzenStack>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn Size="12">
                            <RadzenCard class="rz-mx-4 rz-my-0 rz-p-2">
                                <RadzenRow Gap="0" AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeLG="3">
                                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6" class="rz-mb-0">Product Name</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeLG="8">
                                        <RadzenRow Gap="0" AlignItems="AlignItems.Center">
                                            <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                                <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center" class="rz-mb-0">Price</RadzenText>
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                                <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center" class="rz-mb-0">Quantity</RadzenText>
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                                <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center" class="rz-mb-0">Tax %</RadzenText>
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                                <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center" class="rz-mb-0">Total</RadzenText>
                                            </RadzenColumn>
                                        </RadzenRow>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow class="row main">
                        <RadzenColumn Size="12" Style="height: 100%">
                            <RadzenStack Style="max-height: 500px; overflow: auto;" Gap="0.2rem" class="rz-pb-1">
                                @foreach (var item in cartItems)
                                {
                                    <RadzenRow>
                                        <RadzenColumn Size="12" class="rz-px-4">
                                            <RadzenCard Style="width: 100%; padding: 0;" Variant="Variant.Filled" class="@(cartItems.IndexOf(item) == selectedIndex ? "selected" : "")">
                                                <RadzenRow Gap="0" AlignItems="AlignItems.Center" class="rz-p-1">
                                                    <RadzenColumn Size="12" SizeLG="3" Class="rz-px-4">
                                                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6" class="rz-mb-0">@(item.Product.Name)</RadzenText>
                                                        </RadzenColumn>
                                                        <RadzenColumn Size="12" SizeLG="8">
                                                            <RadzenRow Gap="0" AlignItems="AlignItems.Center">
                                                                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                                                    <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Center">@(item.Price.ToString("#,##0.#0"))</RadzenText>
                                                                </RadzenColumn>
                                                                <RadzenColumn Size="12" SizeMD="6" SizeLG="2">
                                                                    <RadzenNumeric @bind-Value="@item.Quantity" Min="1" Max="999" TextAlign="TextAlign.Center" Disabled="@returnMode" TValue="int" Change="@(args => QtyChanged(args))" />
                                                                </RadzenColumn>
                                                                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                                                    <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Center">@(item.Product.Tax)</RadzenText>
                                                                </RadzenColumn>
                                                                <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                                                    <RadzenText TextStyle="TextStyle.Body2" TextAlign="TextAlign.Center">@(item.Total.ToString("#,##0.#0"))</RadzenText>
                                                                </RadzenColumn>
                                                                <RadzenColumn Size="12" SizeMD="6" SizeLG="1" Class="rz-text-align-start rz-text-align-lg-end">
                                                                    @if (item.Product.Subsidized && selectedCustomer?.Type == CustomerType.Employee)
                                                                {
                                                                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" class="price-badge" Text="Subsidized" />
                                                                }
                                                            </RadzenColumn>
                                                        </RadzenRow>
                                                    </RadzenColumn>
                                                    <RadzenColumn Size="12" SizeLG="1" Class="rz-px-4">
                                                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Style="width: 100%" Click="@(args => RemoveItem(item))" Disabled="@returnMode" />
                                                    </RadzenColumn>
                                                </RadzenRow>
                                            </RadzenCard>
                                        </RadzenColumn>
                                    </RadzenRow>
                                }
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenCard class="rz-mx-4 rz-my-0 row footer">
                        <RadzenRow Gap="0" AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeLG="3">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6" class="rz-mb-0">Item(s) Count: @cartItems.Count</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeLG="9">
                                <RadzenRow Gap="0" AlignItems="AlignItems.Center">
                                    <RadzenColumn Size="12" SizeLG="4">
                                        <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center" class="rz-mb-0">Total Qty: @cartItems.Sum(x => x.Quantity)</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeLG="4">
                                        <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center" class="rz-mb-0">Tax Amount: @taxAmount.ToString("#,##0.#0")</RadzenText>
                                    </RadzenColumn>
                                    <RadzenColumn Size="12" SizeLG="4">
                                        <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center" class="rz-mb-0">Total Amount: @netAmount.ToString("#,##0.#0")</RadzenText>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>

        <RadzenColumn Size="4">
            <RadzenCard Style="height: 100%" Variant="Variant.Flat">
                <RadzenStack>

                    @if (!paymentsVisible)
                    {
                        <RadzenHeading Size="H3" Text="Transaction Details" />

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="6">
                                <RadzenText>Scan Card</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <input placeholder="Scan Card (F5)" @bind-value="@cardNo" @bind-value:event="oninput" class="rz-textbox rz-border-radius-6" autocomplete="false" style="width:100%" @onkeydown="SearchCustomer" @ref="cardInput" id="cardInput" disabled="@(cartItems.Count > 0 && selectedCustomer != null)" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="6">
                                <RadzenText>Select Customer</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenDropDown AllowClear="true" AllowFiltering="true" Placeholder="Select Customer" TValue="Customer" TextProperty="Name" class="rz-border-radius-6" Data="customers" @bind-Value="@selectedCustomer" Style="width: 100%;" id="drpCustomer" Disabled="@(cartItems.Count > 0 && selectedCustomer != null)" />
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="6">
                                <RadzenText>Balance</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenText TextAlign="TextAlign.End">@selectedCustomer?.Balance.ToString("#,##0.00")</RadzenText>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenHeading Size="H3" Text="Summary" class="rz-mt-3" />

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="6">
                                <RadzenText>Gross Amount</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenText TextAlign="TextAlign.End">@grossAmount.ToString("#,##0.00")</RadzenText>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="6">
                                <RadzenText>Tax</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenText TextAlign="TextAlign.End">@taxAmount.ToString("#,##0.00")</RadzenText>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="6">
                                <RadzenText>Net Amount</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenText TextAlign="TextAlign.End">@netAmount.ToString("#,##0.00")</RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                    }
                    else
                    {
                        <RadzenHeading Size="H3" Text="Payments" />

                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="6">
                                <RadzenText>Balance</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenText TextAlign="TextAlign.End">@balance.ToString("#,##0.#0")</RadzenText>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenColumn Size="12">
                                <RadzenStack Orientation="Orientation.Horizontal">
                                    @if (selectedCustomer?.Type == CustomerType.Employee)
                                    {
                                        <RadzenButton Text="(F2) Cashless" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" Style="width: 100%" Click="@(args => AddPayment("Cashless"))" />
                                    }
                                    else if (selectedCustomer?.Type == CustomerType.PrePay)
                                    {
                                        <RadzenButton Text="(F3) Prepaid Card" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" Style="width: 100%" Click="@(args => AddPayment("Prepay"))" />
                                    }
                                    else
                                    {
                                        <RadzenButton Text="(F4) Cash" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" Style="width: 100%" Click="@(args => AddPayment("Cash"))" />
                                        <RadzenButton Text="(F5) Card" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" Style="width: 100%" Click="@(args => AddPayment("Card"))" />
                                        <RadzenButton Text="Voucher" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" Style="width: 100%" Click="@(args => AddPayment("Voucher"))" />
                                    }
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow>
                            <RadzenColumn Size="12">
                                <RadzenDataGrid @ref="paymentsGrid" AllowFiltering="false" AllowSorting="false" AllowPaging="false" TItem="Payment" Data="@payments" AllowColumnResize="false">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Payment" Property="Method" Title="Method"></RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Payment" Property="Amount" Title="Amount"></RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Payment" Width="70px" TextAlign="TextAlign.Center">
                                            <Template Context="data">
                                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Light" Variant="Variant.Flat" Click="@(args => RemovePayment(data))" />
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenColumn>
                        </RadzenRow>
                    }

                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Stretch" AlignItems="AlignItems.Center">
                                <RadzenButton Text="Void (F6)" Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Dark" Style="width: 100%" Click="@VoidSale" />
                                <RadzenButton Text="Park (F7)" Icon="schedule" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Dark" Style="width: 100%" Click="@ParkSale" />
                                @if (paymentsVisible)
                                {
                                    <RadzenButton Text="Back" Icon="arrow_back" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Dark" Click="@(args => paymentsVisible = false)" Style="width: 100%" />
                                }
                                else
                                {
                                    <RadzenButton Text="Total (F1)" Icon="payments" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Dark" Disabled="@(netAmount == 0)" Click="@TogglePaymentPanel" id="btnPayment" Style="width: 100%" />
                                }
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>

                    @if (paymentsVisible)
                    {
                        <RadzenRow>
                            <RadzenColumn Size="12">
                                <RadzenStack>
                                    <RadzenButton Text="Checkout (F1)" Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Dark" Disabled="@(balance != 0 || netAmount == 0)" Click="@Checkout" Style="width: 100%" id="btnCheckout" />
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                    }
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <RadzenCard Variant="Variant.Flat" class="footer row">
        <RadzenRow>
            <RadzenColumn Size="9">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                    @if (!registerOpen)
                    {
                        <RadzenButton Icon="key" Text="Open Register" ButtonStyle="ButtonStyle.Success" Shade="Shade.Light" Variant="Variant.Filled" Click="@OpenRegister" />
                    }
                    else
                    {
                        <RadzenButton Icon="close" Text="Close Register" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Light" Variant="Variant.Filled" Click="@CloseRegister" />
                    }
                    <RadzenButton Icon="schedule" Text="Parked Sales" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" />
                    <RadzenButton Icon="keyboard_return" Text="Sale Return" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" Click="@OpenReturnSale" />
                    <RadzenButton Icon="print" Text="Print Last Receipt" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" />
                    <RadzenButton Icon="print" Text="Print Last Z-Read" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" Variant="Variant.Filled" />
                    <RadzenButton Icon="refresh" Text="Sync Products" ButtonStyle="ButtonStyle.Success" Shade="Shade.Light" Variant="Variant.Filled" />
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="3">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                    <RadzenText>@DateTime.Now.ToString("dd-MMM-yy hh:mm tt")</RadzenText>
                    <RadzenButton Text="Logout" ButtonStyle="ButtonStyle.Danger" Shade="Shade.Light" Variant="Variant.Filled" Icon="logout" Click="@(args => NavigationManager.NavigateTo("/login"))" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

    </RadzenCard>
</RadzenStack>


@code {
    List<Product> products = new();
    List<Customer> customers = new();
    List<CartItem> cartItems = new();
    List<Payment> payments = new();
    RadzenDataGrid<Payment> paymentsGrid;

    Customer? selectedCustomer;

    bool registerOpen = false;
    string search = "";
    string cardNo = "";
    double grossAmount = 0;
    double taxAmount = 0;
    double netAmount = 0;
    double paid = 0;
    double balance = 0;
    double paymentAmout = 0;
    int selectedIndex = 0;
    bool paymentsVisible = false;

    private ElementReference barcodeInput;
    private ElementReference cardInput;

    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);
        products = await GlobalService.GetProducts();
        customers = await GlobalService.GetCustomers();
        await OpenRegister();
        await JSRuntime.InvokeVoidAsync("registerShortcuts");
    }

    async Task ViewProducts()
    {
        var response = await DialogService.OpenAsync<ProductList>("Product List", options: new DialogOptions() { Width = "80%", Height = "80%" });

        if (response != null)
        {
            AddToCart(response.ToString());
        }
    }

    void QtyChanged(int value)
    {
        Calculate();
    }

    void SearchBarcode(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            string barcode = "";
            int qty = 1;

            if (search.Contains("X"))
            {
                barcode = search.Split("X")[0];
                int.TryParse(search.Split("X")[1], out qty);
            }
            else if (search.Contains("x"))
            {
                barcode = search.Split("x")[0];
                int.TryParse(search.Split("x")[1], out qty);
            }
            else
            {
                barcode = search;
            }

            AddToCart(barcode, qty);
        }
    }

    void AddToCart(string barcode, int qty = 1)
    {
        if (!registerOpen)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Register is Closed!");
            return;
        }

        var product = products.FirstOrDefault(x => x.Barcode.ToLower() == barcode.ToLower() || x.AlternateBarcodes.Any(x => x.ToLower() == barcode.ToLower()));
        if (product != null)
        {
            double total = 0;
            double price = 0;

            if (selectedCustomer?.Type == CustomerType.Employee && product.Subsidized)
            {
                product.Tax = 0;
                price = product.SubsidizedPrice;
                total = price * qty;
            }
            else
            {
                price = product.Price;
                total = (price + (price * product.Tax / 100)) * qty;
            }
            cartItems.Add(new CartItem() { Product = product, Price = price, Quantity = qty, Total = total });
            InvokeAsync(StateHasChanged);
            Calculate();
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Invalid Product Code!");
        }
        search = "";
    }

    void RemoveItem(CartItem item)
    {
        cartItems.Remove(item);
        Calculate();
    }

    void SearchCustomer(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            var customer = customers.FirstOrDefault(x => x.Identity == cardNo);

            if (customer != null)
            {
                selectedCustomer = customer;
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Invalid Card Number!");
            }

            cardNo = "";
        }
    }

    async Task ResetScreen()
    {
        cartItems.Clear();
        search = "";
        selectedCustomer = null;
        payments.Clear();
        paymentsGrid?.Reload();
        paid = 0;
        paymentsVisible = false;
        returnMode = false;
        Calculate();

        await InvokeAsync(StateHasChanged);

        await JSRuntime.InvokeVoidAsync("focusTxtBarcode");
    }

    void Calculate()
    {
        grossAmount = cartItems.Sum(x => x.Price * x.Quantity);
        taxAmount = cartItems.Sum(x => (x.Price * x.Product.Tax / 100) * x.Quantity);
        netAmount = grossAmount + taxAmount;
        balance = netAmount - paid;
        paymentAmout = balance;
    }

    void AddPayment(string method)
    {
        if (paymentsVisible)
        {
            if (paymentAmout != 0 && balance != 0)
            {
                payments.Add(new Payment() { Method = method, Amount = paymentAmout });

                paid += paymentAmout;
                balance = Math.Round(netAmount - paid, 2);
                paymentAmout = balance;

                paymentsGrid.Reload();
                InvokeAsync(StateHasChanged);
            }
        }
    }

    void RemovePayment(Payment payment)
    {
        payments.Remove(payment);
        paid -= payment.Amount;
        balance = Math.Round(netAmount - paid, 2);
        paymentAmout = balance;


        paymentsGrid.Reload();
        InvokeAsync(StateHasChanged);
    }

    [JSInvokableAttribute("VoidSale")]
    public async Task VoidSale()
    {
        bool? response = await DialogService.Confirm("The action can not be undone. Do you want to proceed further?", "Void Sale", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (response == true)
            await ResetScreen();
    }

    [JSInvokableAttribute("ParkSale")]
    public async Task ParkSale()
    {
        bool? response = await DialogService.Confirm("Do you want to proceed further?", "Park Sale", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (response == true)
        {
            await ResetScreen();
            NotificationService.Notify(NotificationSeverity.Info, "Sale Parked!");
        }
    }

    [JSInvokableAttribute("Checkout")]
    public async Task Checkout()
    {
        if (netAmount == 0 || balance > 0)
            return;

        NotificationService.Notify(NotificationSeverity.Success, "Success", "Transaction Completed!");
        await ResetScreen();
    }

    [JSInvokableAttribute("TogglePaymentPanel")]
    public async Task TogglePaymentPanel()
    {
        if (netAmount == 0)
            return;

        paymentsVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokableAttribute("AddCashless")]
    public void AddCashless()
    {
        if (selectedCustomer?.Type == CustomerType.Employee)
        {
            if (selectedCustomer.Balance < netAmount)
            {
                DialogService.Alert($"Selected customer has remaining balance of Rs. {selectedCustomer.Balance.ToString("#,##0.#0")}", "Insufficient Balance!", new AlertOptions() { OkButtonText = "OK" });
                return;
            }

            AddPayment("Cashless");
        }
    }

    [JSInvokableAttribute("AddPrepay")]
    public async Task AddPrepay()
    {
        if (selectedCustomer?.Type == CustomerType.PrePay)
        {
            await PaymentModal("Prepaid Card");
        }
    }

    [JSInvokableAttribute("AddCash")]
    public async Task AddCash()
    {
        if (selectedCustomer?.Type != CustomerType.Employee && selectedCustomer?.Type != CustomerType.PrePay)
        {
            await PaymentModal("Cash");
        }
    }

    [JSInvokableAttribute("AddCard")]
    public async Task AddCard()
    {
        if (selectedCustomer?.Type != CustomerType.Employee && selectedCustomer?.Type != CustomerType.PrePay)
        {
            await PaymentModal("Card");
        }
    }

    async Task PaymentModal(string method)
    {
        if (paymentsVisible && balance != 0)
        {
            var response = await DialogService.OpenAsync<AddPayment>(method, new Dictionary<string, object>() { { "amount", paymentAmout } });

            if (response != null)
            {
                double amount = (double)response;
                payments.Add(new Payment() { Method = method, Amount = amount });

                paid += amount;
                balance = Math.Round(netAmount - paid, 2);
                paymentAmout = balance;

                await paymentsGrid.Reload();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    async Task OpenRegister()
    {
        var response = await DialogService.OpenAsync<RegisterOpening>("Open Register");

        if (response != null)
        {
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Register Opened!");
            registerOpen = true;
        }
    }

    async Task CloseRegister()
    {
        var response = await DialogService.OpenAsync<RegisterClosing>("Close Register", options: new DialogOptions() { Width = "50%" });

        if (response == true)
        {
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Register Closed!");
            registerOpen = false;
        }
    }

    bool returnMode = false;

    [JSInvokable("OpenReturnSale")]
    public async Task OpenReturnSale()
    {
        var response = await DialogService.OpenAsync<ReturnSale>("Return Sale");

        if (response != null)
        {
            await ResetScreen();

            returnMode = true;

            selectedCustomer = customers.First();

            AddToCart("P01", -2);
            AddToCart("P02", -1);

            await InvokeAsync(StateHasChanged);
        }
    }

    [JSInvokable("SelectPrevious")]
    public void SelectPrevious()
    {
        if(selectedIndex == 0)
            return;

        selectedIndex--;

        InvokeAsync(StateHasChanged);
    }

    [JSInvokable("SelectNext")]
    public void SelectNext()
    {
        if (selectedIndex == cartItems.Count - 1)
            return;

        selectedIndex++;

        InvokeAsync(StateHasChanged);
    }

    [JSInvokable("RemoveItem")]
    public void RemoveItem()
    {
        cartItems.Remove(cartItems.ElementAt(selectedIndex));

        if (selectedIndex != 0)
            selectedIndex--;

        Calculate();
        InvokeAsync(StateHasChanged);
    }
}